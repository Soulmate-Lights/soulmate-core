#! /usr/bin/ruby
# frozen_string_literal: true

require 'fileutils'
require 'open3'
require 'etc'

Dir.chdir("#{ENV['HOME']}/soulmate"){
  puts "Updating soulmate..."
  system("git pull")
}

unless Dir.glob(File.join(Dir.pwd, 'main.cpp')).any?
  puts "Oops - no Soulmate code found in this folder!"
  exit
end

builder_directory = "#{ENV['HOME']}/soulmate/builder"
destination = "#{builder_directory}/main"
FileUtils.rm_r destination if File.exist?(destination)
FileUtils.mkdir_p destination
FileUtils.cp_r(Dir[Dir.pwd + '/*'], destination)
component_mk_file = File.join(destination, "component.mk")
File.write(component_mk_file, "COMPONENT_SRCDIRS := .")

cores = Etc.nprocessors - 1

make_args = 'flash'

ports = ['/dev/tty.wchusbserial*', '/dev/cu.SLAB_USBtoUART', '/dev/tty.usbserial-*']
port = ports.map { |p| Dir.glob(p) }.flatten.first
unless port
  puts "Oops! I couldn't find an ESP32!"
  puts "Looked for these ports: #{ports.join(', ')}"
  puts "Compiling anyway..."
  # No flash command if we don't have a port
  make_args = ''
end

if ARGV.length > 0
  make_args = ARGV.join(' ')
end

baud = '2000000'
# Special M5Atom baud rate
baud = '1500000' if port and port.start_with? '/dev/tty.usbserial-'
command = "ESPBAUD=#{baud} IDF_PATH=#{ENV['HOME']}/soulmate/esp-idf PATH=#{ENV['HOME']}/soulmate/xtensa-esp32-elf/bin:$PATH ESPPORT=#{port} make -j#{cores} #{make_args}"

puts command

print "Compiling #{port && "and uploading to #{port}"}"

Dir.chdir(builder_directory){
  Open3.popen3(command) do |_stdin, stdout, stderr, thread|
    putc '.' while stdout.gets

    puts

    if thread.value == 0
      if port
        puts 'Your Soulmate is now online. Open your app to control it!'
      else
        puts "Soulmate code compiled."
      end
    else
      puts 'Oops - something went wrong! Try running the command again.'

      stderr.each_line do |line|
        puts line if line.include? 'error:'
      end
    end
  end
}
